#!/bin/bash
# shellcheck disable=SC2154
# (silence shellcheck wrt $cam1 environment variable)

if [[ $# -lt 4 ]];  then  echo "Format: [narrow=1] [cam1=1] $0 width height framerate ms [us] [output_path]"; exit;  fi
if [[ "$(( $1 % 2 ))" -eq 1 ]];  then echo "width has to be even"; exit;  fi
if [[ "$(( $2 % 2 ))" -eq 1 ]];  then echo "height has to be even"; exit;  fi

export SHTR=""; if [[ $# -gt 4 ]]; then SHTR="--shutter"; fi
export workaround=""; if [[ "" != "$(grep '=bookworm' /etc/os-release)" ]]; then workaround="--no-raw"; fi
export d=10; if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]; then if [[ "$cam1" == "" ]]; then d=10; else d=11; fi; fi

# Use local output directory
MARKERS_DIR="./output"
mkdir -p "$MARKERS_DIR"

# Debug output for troubleshooting
echo "DEBUG: STREAM_LSL environment variable is: '$STREAM_LSL'" >&2
echo "DEBUG: PREVIEW environment variable is: '$PREVIEW'" >&2
echo "DEBUG: VIDEO_CONTAINER environment variable is: '$VIDEO_CONTAINER'" >&2
echo "DEBUG: VIDEO_ENCODER environment variable is: '$VIDEO_ENCODER'" >&2
echo "DEBUG: FRAGMENTED_MP4 environment variable is: '$FRAGMENTED_MP4'" >&2
echo "DEBUG: Number of arguments: $#" >&2
echo "DEBUG: All arguments: $*" >&2

# Determine video format settings
CONTAINER_FORMAT="${VIDEO_CONTAINER:-auto}"
ENCODER_TYPE="${VIDEO_ENCODER:-auto}"
USE_FRAGMENTED="${FRAGMENTED_MP4:-}"

# Function to determine file extension and encoding options
determine_video_format() {
    local is_newer_pi=""
    if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]; then
        is_newer_pi="1"
    fi
    
    local base_output="$1"
    local container="$2"
    local encoder="$3"
    local fragmented="$4"
    
    # Set defaults based on Pi version if auto
    if [[ "$container" == "auto" ]]; then
        if [[ -n "$is_newer_pi" ]]; then
            container="mp4"  # rpicam-vid supports MP4 natively
        else
            container="h264"  # libcamera-vid outputs raw H.264
        fi
    fi
    
    # Initialize codec arguments
    CODEC_ARGS=""
    ENCODER_ARGS=""
    
    # Determine file extension and codec options
    case "$container" in
        "mkv")
            VIDEO_OUTPUT="${base_output}.mkv"
            if [[ -n "$is_newer_pi" ]]; then
                CODEC_ARGS="--codec libav"  # Use libav for MKV
            else
                # For older Pi, we'll need to use raw H.264 and convert
                VIDEO_OUTPUT="${base_output}.h264"
                echo "WARNING: MKV not directly supported on older Pi, using H.264. Convert with: ffmpeg -i ${base_output}.h264 -c copy ${base_output}.mkv" >&2
            fi
            ;;
        "mp4")
            VIDEO_OUTPUT="${base_output}.mp4"
            if [[ -n "$fragmented" ]]; then
                # For fragmented MP4, we'll set full args later to avoid duplication
                echo "INFO: Using fragmented MP4 for better reliability" >&2
            else
                CODEC_ARGS=""  # Default MP4 (hardware encoding)
            fi
            ;;
        "h264")
            VIDEO_OUTPUT="${base_output}.h264"
            CODEC_ARGS=""  # Raw H.264, no container
            echo "INFO: Using raw H.264 for maximum speed" >&2
            ;;
        *)
            echo "ERROR: Unsupported container format: $container" >&2
            exit 1
            ;;
    esac
    
    # Handle encoder-specific arguments and fragmented MP4 special case
    if [[ "$container" == "mp4" && -n "$fragmented" && -n "$is_newer_pi" ]]; then
        # Special case: fragmented MP4 - use single codec args to avoid duplication
        CODEC_ARGS="--codec libav --libav-format mp4 --libav-audio 0"
        ENCODER_ARGS=""
        export LIBAV_EXTRA_ARGS="-movflags frag_keyframe+empty_moov"
        echo "INFO: Enabled fragmented MP4 mode for interruption resilience" >&2
    elif [[ "$encoder" == "hardware" || "$encoder" == "auto" ]]; then
        # Use hardware encoding (default for rpicam-vid/libcamera-vid)
        # CODEC_ARGS already set above, don't override
        echo "INFO: Using hardware H.264 encoding (GPU accelerated)" >&2
    elif [[ "$encoder" == "fast" ]]; then
        # Use fast CPU encoding preset
        if [[ -z "$CODEC_ARGS" ]]; then
            CODEC_ARGS="--codec libav --libav-format h264 --libav-audio 0"
        fi
        echo "INFO: Using fast software encoding" >&2
    elif [[ "$encoder" == "software" ]]; then
        # Use high-quality CPU encoding
        if [[ -z "$CODEC_ARGS" ]]; then
            CODEC_ARGS="--codec libav --libav-format h264 --libav-audio 0"
        fi
        echo "INFO: Using software encoding for quality" >&2
    fi
    
    echo "FINAL: Video output: $VIDEO_OUTPUT, codec args: $CODEC_ARGS, encoder args: $ENCODER_ARGS" >&2
}

# Determine output path - use custom path if provided, otherwise use default
if [[ $# -gt 5 && -n "$6" ]]; then
    OUTPUT_PATH="$6"
    echo "Using custom output path: $OUTPUT_PATH" >&2
else
    OUTPUT_PATH="$MARKERS_DIR/tst${cam1:+1}"
    echo "Using default output path: $OUTPUT_PATH" >&2
fi

# Set preview mode - if PREVIEW=1, enable preview (remove -n flag)
if [[ "$PREVIEW" == "1" ]]; then
    PREVIEW_FLAG=""
    echo "Preview mode enabled" >&2
else
    PREVIEW_FLAG="-n"
    echo "Preview mode disabled (headless)" >&2
fi

# Create markers file for LSL synchronization (simple version)
MARKERS_FILE="$MARKERS_DIR/camera_markers.txt"
echo "Starting recording" > "$MARKERS_FILE"
echo "CONFIG: ${1}x${2}@${3}fps" >> "$MARKERS_FILE"
chmod 666 "$MARKERS_FILE" 2>/dev/null || true
echo "Markers file: $MARKERS_FILE" >&2

# Check if user is in video group (camera access)
if ! groups | grep -q "video\|camera"; then
    echo "WARNING: User not in 'video' group. Camera access may fail." >&2
    echo "HINT: Add user to video group: sudo usermod -a -G video \$USER" >&2
    echo "HINT: Then logout and login again for changes to take effect" >&2
fi

# ENHANCEMENT: Dynamic device detection with unlimited scalability
# Get all available media devices dynamically (no hardcoded limits)
MEDIA_DEVICES=($(ls /dev/media* 2>/dev/null | sort -V))

if [ ${#MEDIA_DEVICES[@]} -eq 0 ]; then
    echo "ERROR: No media devices found in /dev/media*" >&2
    echo "HINT: Make sure camera is connected and drivers are loaded" >&2
    echo "HINT: Try: lsmod | grep imx296" >&2
    exit 1
fi

echo "Found ${#MEDIA_DEVICES[@]} media device(s): ${MEDIA_DEVICES[*]}" >&2

# Auto-discover IMX296 entity
echo "Discovering IMX296 entity..." >&2
IMX296_ENTITY=""
MEDIA_DEVICE=""

for media_dev in "${MEDIA_DEVICES[@]}"; do
    echo "Scanning $media_dev..." >&2
    # Look for imx296 entity using media-ctl -p
    entity_output=$(media-ctl -d "$media_dev" -p 2>/dev/null | grep -E "entity.*imx296.*-001a")
    if [[ -n "$entity_output" ]]; then
        # Extract entity name (e.g., "imx296 11-001a")
        IMX296_ENTITY=$(echo "$entity_output" | sed -n 's/.*entity [0-9]*: \([^(]*\).*/\1/p' | xargs)
        if [[ -n "$IMX296_ENTITY" ]]; then
            echo "Found IMX296 entity: '$IMX296_ENTITY' on $media_dev" >&2
            MEDIA_DEVICE="$media_dev"
        break
        fi
    fi
done

# If not found, fall back to old method
if [[ -z "$IMX296_ENTITY" ]]; then
    echo "Auto-discovery failed, using default: imx296 $d-001a" >&2
    IMX296_ENTITY="imx296 $d-001a"
    MEDIA_DEVICE="${MEDIA_DEVICES[0]}"
fi

# Configure the camera
echo "Configuring $MEDIA_DEVICE with entity '$IMX296_ENTITY'" >&2
if media-ctl -d "$MEDIA_DEVICE" --set-v4l2 "'$IMX296_ENTITY':0 [fmt:SBGGR10_1X10/${1}x${2} crop:($(( (1440 - $1) / 2 )),$(( (1088 - $2) / 2 )))/${1}x$2]" -v; then
    echo "Successfully configured camera" >&2
    echo "MEDIA_DEVICE: $MEDIA_DEVICE" >> "$MARKERS_FILE"
    echo "ENTITY: $IMX296_ENTITY" >> "$MARKERS_FILE"
else
    echo "ERROR: Failed to configure camera" >&2
    exit 1
fi

libcamera-hello --list-cameras ; echo
rm -f "$MARKERS_DIR/tst.pts"

if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]
then
  # Determine video format for newer Pi
  determine_video_format "$OUTPUT_PATH" "$CONTAINER_FORMAT" "$ENCODER_TYPE" "$USE_FRAGMENTED"
  
  if [[ -n "$STREAM_LSL" ]]; then
    # Real-time LSL mode: Don't use --save-pts, stream frame info via stdout instead
    echo "DEBUG: Using STREAM_LSL mode (rpicam-vid without --save-pts)" >&2
    echo "STREAM_START:$(date +%s.%N)" >&2
    
    # Record video with determined format
    rpicam-vid "$workaround" ${cam1:+--camera 1} --width "$1" --height "$2" --denoise cdn_off --framerate "$3" -t "$4" "$SHTR" "$5" $CODEC_ARGS $ENCODER_ARGS -o "$VIDEO_OUTPUT" $PREVIEW_FLAG &
    RPICAM_PID=$!
    
    # Simulate frame timing based on target FPS for real-time LSL
    frame_interval=$(echo "scale=6; 1.0 / $3" | bc -l)
    start_time=$(date +%s.%N)
    frame_num=1
    
    # Stream frame data in real-time while recording
    while kill -0 $RPICAM_PID 2>/dev/null; do
      current_time=$(date +%s.%N)
      expected_time=$(echo "$start_time + ($frame_num - 1) * $frame_interval" | bc -l)
      
      if (( $(echo "$current_time >= $expected_time" | bc -l) )); then
        # Output frame data for Python script to parse
        echo "FRAME_DATA:$frame_num:$current_time"
        frame_num=$((frame_num + 1))
      fi
      
      # Small sleep to prevent excessive CPU usage
      sleep 0.001
    done
    
    # Wait for recording to complete
    wait $RPICAM_PID
    echo "STREAM_END:$(date +%s.%N)" >&2
    echo "DEBUG: STREAM_LSL mode completed - NOT running traditional mode" >&2
  else
    # Traditional mode: Record video with PTS file
    echo "DEBUG: Using traditional mode (rpicam-vid with --save-pts)" >&2
    rpicam-vid "$workaround" ${cam1:+--camera 1} --width "$1" --height "$2" --denoise cdn_off --framerate "$3" -t "$4" "$SHTR" "$5" --save-pts "$MARKERS_DIR/tst.pts" $CODEC_ARGS $ENCODER_ARGS -o "$VIDEO_OUTPUT" $PREVIEW_FLAG
    
    # Convert PTS file to markers file format
    if [[ -f "$MARKERS_DIR/tst.pts" ]]; then
      echo "Converting PTS to markers format..." >&2
      awk '{print NR " " $2/1000000}' "$MARKERS_DIR/tst.pts" >> "$MARKERS_FILE"
      echo "Added $(wc -l < "$MARKERS_DIR/tst.pts") frame timestamps to markers file" >&2
    fi
  fi
  
  # Plotting is now optional - only run if ENABLE_PLOT flag is set
  if [[ -n "$ENABLE_PLOT" && -f "$MARKERS_DIR/tst.pts" ]]; then
    # Find python path flexibly - check virtual environment first
    PYTHON_PATH=""
    if [[ -f "./venv/bin/python" ]]; then
      PYTHON_PATH="./venv/bin/python"
    elif [[ -f "$HOME/venv/bin/python" ]]; then
      PYTHON_PATH="$HOME/venv/bin/python"
    elif [[ -f "/home/$(whoami)/venv/bin/python" ]] 2>/dev/null; then
      PYTHON_PATH="/home/$(whoami)/venv/bin/python"
    else
      PYTHON_PATH="python3"
    fi
    
    # Find timestamp script flexibly - check multiple locations
    TIMESTAMP_SCRIPT=""
    # Check user's home directory first
    if [[ -f "$HOME/rpicam-apps/utils/timestamp.py" ]]; then
      TIMESTAMP_SCRIPT="$HOME/rpicam-apps/utils/timestamp.py"
    # Check current directory
    elif [[ -f "./rpicam-apps/utils/timestamp.py" ]]; then
      TIMESTAMP_SCRIPT="./rpicam-apps/utils/timestamp.py"
    # Check system installations
    elif [[ -f "/usr/share/rpicam-apps/utils/timestamp.py" ]]; then
      TIMESTAMP_SCRIPT="/usr/share/rpicam-apps/utils/timestamp.py"
    elif [[ -f "/opt/rpicam-apps/utils/timestamp.py" ]]; then
      TIMESTAMP_SCRIPT="/opt/rpicam-apps/utils/timestamp.py"
    # Check for any rpicam-apps installation
    elif find /usr -name "timestamp.py" -path "*/rpicam-apps/*" 2>/dev/null | head -1 | read -r found_script; then
      TIMESTAMP_SCRIPT="$found_script"
    fi
    
    if [[ -n "$TIMESTAMP_SCRIPT" ]]; then
      echo "Using timestamp script: $TIMESTAMP_SCRIPT" >&2
      # Save plot to file instead of displaying interactively to avoid GUI hang
      "$PYTHON_PATH" "$TIMESTAMP_SCRIPT" --plot --output "$MARKERS_DIR/timestamp_plot.png" ${narrow:+--narrow} "$OUTPUT_PATH.mp4" 2>/dev/null || \
      "$PYTHON_PATH" "$TIMESTAMP_SCRIPT" --plot ${narrow:+--narrow} "$OUTPUT_PATH.mp4" 2>/dev/null || \
      echo "Timestamp analysis completed but plot generation failed" >&2
    else
      echo "Timestamp analysis script not found, skipping plot generation" >&2
    fi
  elif [[ -n "$ENABLE_PLOT" ]]; then
    echo "Plot requested but no PTS file available" >&2
  fi
else
  # Determine video format for older Pi  
  determine_video_format "$OUTPUT_PATH" "$CONTAINER_FORMAT" "$ENCODER_TYPE" "$USE_FRAGMENTED"
  
  if [[ -n "$STREAM_LSL" ]]; then
    # Real-time LSL mode for older libcamera
    echo "STREAM_START:$(date +%s.%N)" >&2
    
    libcamera-vid "$workaround" --width "$1" --height "$2" --denoise cdn_off --framerate "$3" -t "$4" "$SHTR" "$5" $CODEC_ARGS $ENCODER_ARGS -o "$VIDEO_OUTPUT" $PREVIEW_FLAG &
    LIBCAM_PID=$!
    
    # Simulate frame timing based on target FPS
    frame_interval=$(echo "scale=6; 1.0 / $3" | bc -l)
    start_time=$(date +%s.%N)
    frame_num=1
    
    # Stream frame data in real-time while recording
    while kill -0 $LIBCAM_PID 2>/dev/null; do
      current_time=$(date +%s.%N)
      expected_time=$(echo "$start_time + ($frame_num - 1) * $frame_interval" | bc -l)
      
      if (( $(echo "$current_time >= $expected_time" | bc -l) )); then
        echo "FRAME_DATA:$frame_num:$current_time"
        frame_num=$((frame_num + 1))
      fi
      
      sleep 0.001
    done
    
    wait $LIBCAM_PID
    echo "STREAM_END:$(date +%s.%N)" >&2
  else
    # Traditional mode
    libcamera-vid "$workaround" --width "$1" --height "$2" --denoise cdn_off --framerate "$3" --save-pts "$MARKERS_DIR/tst.pts" -t "$4" "$SHTR" "$5" $CODEC_ARGS $ENCODER_ARGS -o "$VIDEO_OUTPUT" $PREVIEW_FLAG
    
    # Convert PTS file to markers file format for LSL
    if [[ -f "$MARKERS_DIR/tst.pts" ]]; then
      echo "Converting PTS to markers format..." >&2
      awk '{print NR " " $2/1000000}' "$MARKERS_DIR/tst.pts" >> "$MARKERS_FILE"
      echo "Added $(wc -l < "$MARKERS_DIR/tst.pts") frame timestamps to markers file" >&2
    fi
    
    rm -f tstamps.csv && ptsanalyze "$MARKERS_DIR/tst.pts" 2>/dev/null || echo "ptsanalyze not available" >&2
  fi
fi
