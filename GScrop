#!/bin/bash
# shellcheck disable=SC2154
# (silence shellcheck wrt $cam1 environment variable)

if [[ $# -lt 4 ]];  then  echo "Format: [narrow=1] [cam1=1] $0 width height framerate ms [us]"; exit;  fi
if [[ "$(( $1 % 2 ))" -eq 1 ]];  then echo "width has to be even"; exit;  fi
if [[ "$(( $2 % 2 ))" -eq 1 ]];  then echo "height has to be even"; exit;  fi

export SHTR=""; if [[ $# -gt 4 ]]; then SHTR="--shutter"; fi
export workaround=""; if [[ "" != "$(grep '=bookworm' /etc/os-release)" ]]; then workaround="--no-raw"; fi
export d=10; if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]; then if [[ "$cam1" == "" ]]; then d=10; else d=11; fi; fi

# Check and create /dev/shm if needed (without sudo)
if [[ ! -d "/dev/shm" ]]; then
    echo "INFO: /dev/shm not available, using /tmp for markers file" >&2
    MARKERS_DIR="/tmp"
else
    # Test write permissions to /dev/shm with a more robust test
    # Try to create a small video-like file to simulate what rpicam-vid needs
    if dd if=/dev/zero of="/dev/shm/test_video_$$" bs=1024 count=1 2>/dev/null && rm -f "/dev/shm/test_video_$$" 2>/dev/null; then
        MARKERS_DIR="/dev/shm"
    else
        echo "INFO: /dev/shm not writable for video files, using /tmp for markers file" >&2
        echo "HINT: To fix this, run: sudo chmod 1777 /dev/shm" >&2
        MARKERS_DIR="/tmp"
    fi
fi

# Create markers file for LSL synchronization (simple version)
MARKERS_FILE="$MARKERS_DIR/camera_markers.txt"
echo "Starting recording" > "$MARKERS_FILE"
echo "CONFIG: ${1}x${2}@${3}fps" >> "$MARKERS_FILE"
chmod 666 "$MARKERS_FILE" 2>/dev/null || true
echo "Markers file: $MARKERS_FILE" >&2

# Check if user is in video group (camera access)
if ! groups | grep -q "video\|camera"; then
    echo "WARNING: User not in 'video' group. Camera access may fail." >&2
    echo "HINT: Add user to video group: sudo usermod -a -G video \$USER" >&2
    echo "HINT: Then logout and login again for changes to take effect" >&2
fi

# ENHANCEMENT: Dynamic device detection with unlimited scalability
# Get all available media devices dynamically (no hardcoded limits)
MEDIA_DEVICES=($(ls /dev/media* 2>/dev/null | sort -V))

if [ ${#MEDIA_DEVICES[@]} -eq 0 ]; then
    echo "ERROR: No media devices found in /dev/media*" >&2
    echo "HINT: Make sure camera is connected and drivers are loaded" >&2
    echo "HINT: Try: lsmod | grep imx296" >&2
    exit 1
fi

echo "Found ${#MEDIA_DEVICES[@]} media device(s): ${MEDIA_DEVICES[*]}" >&2

# Auto-discover IMX296 entity
echo "Discovering IMX296 entity..." >&2
IMX296_ENTITY=""
MEDIA_DEVICE=""

for media_dev in "${MEDIA_DEVICES[@]}"; do
    echo "Scanning $media_dev..." >&2
    # Look for imx296 entity using media-ctl -p
    entity_output=$(media-ctl -d "$media_dev" -p 2>/dev/null | grep -E "entity.*imx296.*-001a")
    if [[ -n "$entity_output" ]]; then
        # Extract entity name (e.g., "imx296 11-001a")
        IMX296_ENTITY=$(echo "$entity_output" | sed -n 's/.*entity [0-9]*: \([^(]*\).*/\1/p' | xargs)
        if [[ -n "$IMX296_ENTITY" ]]; then
            echo "Found IMX296 entity: '$IMX296_ENTITY' on $media_dev" >&2
            MEDIA_DEVICE="$media_dev"
            break
        fi
    fi
done

# If not found, fall back to old method
if [[ -z "$IMX296_ENTITY" ]]; then
    echo "Auto-discovery failed, using default: imx296 $d-001a" >&2
    IMX296_ENTITY="imx296 $d-001a"
    MEDIA_DEVICE="${MEDIA_DEVICES[0]}"
fi

# Configure the camera
echo "Configuring $MEDIA_DEVICE with entity '$IMX296_ENTITY'" >&2
if media-ctl -d "$MEDIA_DEVICE" --set-v4l2 "'$IMX296_ENTITY':0 [fmt:SBGGR10_1X10/${1}x${2} crop:($(( (1440 - $1) / 2 )),$(( (1088 - $2) / 2 )))/${1}x$2]" -v; then
    echo "Successfully configured camera" >&2
    echo "MEDIA_DEVICE: $MEDIA_DEVICE" >> "$MARKERS_FILE"
    echo "ENTITY: $IMX296_ENTITY" >> "$MARKERS_FILE"
else
    echo "ERROR: Failed to configure camera" >&2
    exit 1
fi

libcamera-hello --list-cameras ; echo
rm -f "$MARKERS_DIR/tst.pts"

if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]
then
  rpicam-vid "$workaround" ${cam1:+--camera 1} --width "$1" --height "$2" --denoise cdn_off --framerate "$3" -t "$4" "$SHTR" "$5" -o "$MARKERS_DIR/tst${cam1:+1}.mp4" -n ; echo 
  
  # Find python path flexibly
  PYTHON_PATH=""
  if [[ -f "$HOME/venv/bin/python" ]]; then
    PYTHON_PATH="$HOME/venv/bin/python"
  elif [[ -f "./venv/bin/python" ]]; then
    PYTHON_PATH="./venv/bin/python"
  elif [[ -f "/home/$(logname)/venv/bin/python" ]] 2>/dev/null; then
    PYTHON_PATH="/home/$(logname)/venv/bin/python"
  else
    PYTHON_PATH="python3"
  fi
  
  # Find timestamp script flexibly
  TIMESTAMP_SCRIPT=""
  if [[ -f "$HOME/rpicam-apps/utils/timestamp.py" ]]; then
    TIMESTAMP_SCRIPT="$HOME/rpicam-apps/utils/timestamp.py"
  elif [[ -f "./rpicam-apps/utils/timestamp.py" ]]; then
    TIMESTAMP_SCRIPT="./rpicam-apps/utils/timestamp.py"
  elif [[ -f "/home/$(logname)/rpicam-apps/utils/timestamp.py" ]] 2>/dev/null; then
    TIMESTAMP_SCRIPT="/home/$(logname)/rpicam-apps/utils/timestamp.py"
  fi
  
  if [[ -n "$TIMESTAMP_SCRIPT" ]]; then
    "$PYTHON_PATH" "$TIMESTAMP_SCRIPT" --plot ${narrow:+--narrow} "$MARKERS_DIR/tst${cam1:+1}.mp4"
  else
    echo "Timestamp analysis script not found, skipping plot generation" >&2
  fi
else
  libcamera-vid "$workaround" --width "$1" --height "$2" --denoise cdn_off --framerate "$3" --save-pts "$MARKERS_DIR/tst.pts" -t "$4" "$SHTR" "$5" -o "$MARKERS_DIR/tst.h264" -n ; echo 
  rm -f tstamps.csv && ptsanalyze "$MARKERS_DIR/tst.pts"
fi
