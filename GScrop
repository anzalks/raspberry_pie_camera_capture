#!/bin/bash
# shellcheck disable=SC2154
# (silence shellcheck wrt $cam1 environment variable)

# Enable debug output
set -x

if [[ $# -lt 4 ]];  then  echo "Format: [narrow=1] [cam1=1] $0 width height framerate ms [us] [output_path]"; exit;  fi
if [[ "$(( $1 % 2 ))" -eq 1 ]];  then echo "width has to be even"; exit;  fi
if [[ "$(( $2 % 2 ))" -eq 1 ]];  then echo "height has to be even"; exit;  fi

# Set up shutter parameter if provided
SHTR=""; if [[ $# -gt 4 ]]; then SHTR="--shutter"; fi

# Set up output path (optional parameter 6)
OUTPUT_BASE="/dev/shm"
if [[ $# -gt 5 ]]; then 
    OUTPUT_PATH="$6"
    OUTPUT_DIR="$(dirname "$OUTPUT_PATH")"
    mkdir -p "$OUTPUT_DIR"
else
    OUTPUT_PATH=""
fi

# Create markers file for LSL synchronization
MARKERS_FILE="/dev/shm/camera_markers.txt"
echo "Starting recording" > "$MARKERS_FILE"
echo "Markers file created at $MARKERS_FILE" >&2
chmod 666 "$MARKERS_FILE" 2>/dev/null || true

# Check for Bookworm OS
workaround=""; 
if [[ "" != "$(grep '=bookworm' /etc/os-release)" ]]; then 
    workaround="--no-raw"
fi

# Set AWB mode based on environment variable
AWB_PARAM=""
if [[ "$no_awb" == "1" ]]; then
    echo "AWB disabled per request" >&2
else
    AWB_PARAM="--awb auto"
    echo "Using automatic white balance" >&2
fi

# Detect Pi version and set device ID
d=10; 
if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]; then 
    if [[ "$cam1" == "" ]]; then 
        d=10
    else 
        d=11
    fi
fi

# Find and configure the media device
MEDIA_DEVICE=""
for((m=0; m<=5; ++m))
do
    echo "Trying media device /dev/media$m" >&2
    if media-ctl -d /dev/media$m --set-v4l2 "'imx296 $d-001a':0 [fmt:SBGGR10_1X10/${1}x${2} crop:($(( (1440 - $1) / 2 )),$(( (1088 - $2) / 2 )))/${1}x$2]" -v 2>/dev/null; then
        MEDIA_DEVICE="/dev/media$m"
        echo "Successfully configured media device: $MEDIA_DEVICE" >&2
        break
    fi
done

if [[ -z "$MEDIA_DEVICE" ]]; then
    echo "WARNING: Could not configure any media device" >&2
    # Continue anyway to attempt recording
fi

# Check if camera is detected
libcamera-hello --list-cameras ; echo

# Prepare for recording
rm -f /dev/shm/tst.pts

# Setup pipes for frame counting
FIFO="/dev/shm/camera_fifo"
rm -f "$FIFO"
mkfifo "$FIFO"
chmod 666 "$FIFO" 2>/dev/null || true

# Function to process output and detect frames
process_output() {
    local line="$1"
    local frame_num="$2"
    echo "$line" >&2

    # Check for various frame indicators - be more thorough
    if [[ "$line" == *"frame"* || "$line" == *"Frame"* ]]; then
        # Try to extract frame number if present
        local detected_frame
        if [[ "$line" =~ frame[^0-9]*([0-9]+) ]]; then
            detected_frame="${BASH_REMATCH[1]}"
        else
            # If no frame number in output, increment our counter
            detected_frame=$((frame_num + 1))
        fi

        local timestamp=$(date +%s.%N)
        echo "$detected_frame $timestamp" >> "$MARKERS_FILE"
        echo "Recorded frame $detected_frame at $timestamp" >&2
        return $detected_frame
    fi
    return $frame_num
}

# Start recording based on Pi version
if [[ "" != "$(grep "Revision.*: ...17.$" /proc/cpuinfo)" ]]
then
    # Raspberry Pi 5 - use rpicam-vid
    if [[ -n "$OUTPUT_PATH" ]]; then
        OUTPUT_FILE="${OUTPUT_PATH}.mp4"
    else
        OUTPUT_FILE="/dev/shm/tst${cam1:+1}.mp4"
    fi
    
    echo "Starting rpicam-vid with output to $OUTPUT_FILE" >&2
    
    # Start rpicam-vid with configurable AWB
    # Add --verbose for more frame info
    RPICAM_CMD="rpicam-vid $workaround --verbose ${cam1:+--camera 1} --width $1 --height $2 --denoise cdn_off --framerate $3 $AWB_PARAM -t $4 $SHTR $5 -o $OUTPUT_FILE -n"
    echo "Command: $RPICAM_CMD" >&2
    
    # Execute command and capture output
    frame_num=0
    eval "$RPICAM_CMD" 2>&1 | while read -r line; do
        process_output "$line" "$frame_num"
        frame_num=$?
    done
else
    # Older Raspberry Pi - use libcamera-vid with PTS file
    if [[ -n "$OUTPUT_PATH" ]]; then
        OUTPUT_FILE="${OUTPUT_PATH}.h264"
    else
        OUTPUT_FILE="/dev/shm/tst.h264"
    fi
    
    echo "Starting libcamera-vid with output to $OUTPUT_FILE" >&2
    
    # Start libcamera-vid with configurable AWB
    # Add --verbose for more frame info
    LIBCAM_CMD="libcamera-vid $workaround --verbose --width $1 --height $2 --denoise cdn_off --framerate $3 $AWB_PARAM --save-pts /dev/shm/tst.pts -t $4 $SHTR $5 -o $OUTPUT_FILE -n"
    echo "Command: $LIBCAM_CMD" >&2
    
    # Execute the command and process output for frame markers
    frame_num=0
    eval "$LIBCAM_CMD" 2>&1 | while read -r line; do
        process_output "$line" "$frame_num"
        frame_num=$?
    done
    
    # Run PTS analysis
    if command -v ptsanalyze > /dev/null; then
        rm -f tstamps.csv && ptsanalyze /dev/shm/tst.pts
        
        # Copy PTS data to markers file for LSL sync
        if [[ -f "/dev/shm/tst.pts" ]]; then
            # Append PTS data in a format the monitor can understand
            echo "Adding PTS data to markers file" >&2
            cat /dev/shm/tst.pts | while read -r pts_line; do
                if [[ -n "$pts_line" && "$pts_line" =~ ^([0-9]+)[^0-9]+([0-9.]+) ]]; then
                    echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}" >> "$MARKERS_FILE"
                fi
            done
        fi
    fi
fi

echo "Recording complete. Output saved to: $OUTPUT_FILE" >&2
echo "Frame markers saved to: $MARKERS_FILE" >&2
echo "Total frames detected: $(grep -v "Starting" "$MARKERS_FILE" | wc -l)" >&2

# Disable debug output
set +x 